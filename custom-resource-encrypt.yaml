AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ExampleParameter:
    Type: String
    Description: My password
    NoEcho: True
Resources:
  ServicePasswordSSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: Service Password SSM Parameter
      Type: String
      Value: !Ref ExampleParameter
  ServicePasswordEncryptedSSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: Service Password Encrypted SSM Parameter
      Type: String
      Value: !GetAtt EncryptedServicePassword.EncryptedString
  KMSHelperKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key used in CloudFormation stack to encrypt stuff
      Enabled: True
      EnableKeyRotation: True
      KeyPolicy:
        Version: '2012-10-17'
        Id: enable-user-permissions
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: "*"
        - Sid: Allow access for Key Administrators
          Effect: Allow
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          - kms:TagResource
          - kms:UntagResource
          Resource: "*"
  LambdaEncryptionHelperRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /cloudformation/
      Policies:
        - PolicyName: LambdaFunctionLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*"
        - PolicyName: KMS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - "kms:Encrypt"
                Resource: !GetAtt KMSHelperKey.Arn
  LambdaEncryptionHelper:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            import base64
            import boto3
            import botocore.exceptions
            import cfnresponse
            import uuid

            REQUIRED_KEYS = ["KeyId", "String"]


            def encrypt(resource_properties):
                kms = boto3.client("kms")
                for key in REQUIRED_KEYS:
                    if key not in resource_properties:
                        raise Exception("Missing required parameter '{}'.".format(
                            key))
                try:
                    resp = kms.encrypt(
                        KeyId=resource_properties["KeyId"],
                        Plaintext=resource_properties["String"])
                except botocore.exceptions.ClientError as e:
                    raise Exception("Unable to encrypt string. {}".format(
                        e.response["Error"]["Code"]))
                return(base64.b64encode(resp["CiphertextBlob"]))


            def lambda_handler(event, context):
                if event["RequestType"] in ["Create", "Update"]:
                    try:
                        encrypted_string = encrypt(event["ResourceProperties"])
                    except Exception as e:
                        print("Unable to encrypt string. {}".format(
                            str(e)))
                        if "Update" in event["RequestType"]:
                          phy = str(uuid.uuid4()) #event["PhysicalResourceId"]
                        else:
                          phy = None
                        cfnresponse.send(
                            event,
                            context,
                            cfnresponse.FAILED,
                            None,
                            phy)
                        return
                    cfnresponse.send(
                        event,
                        context,
                        cfnresponse.SUCCESS,
                        {"EncryptedString": encrypted_string},
                        str(uuid.uuid4()))
                elif event["RequestType"] == "Delete":
                    cfnresponse.send(
                        event,
                        context,
                        cfnresponse.SUCCESS,
                        None,
                        event["PhysicalResourceId"])
                else:
                    raise Exception("Unknown RequestType %s" % (event["RequestType"]))
      Description: CloudFormation Custom Resource (Encryption Helper)
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaEncryptionHelperRole.Arn
      Runtime: python2.7
      Timeout: 10
  EncryptedServicePassword:
    Type: Custom::StringEncryption
    Properties:
      ServiceToken: !GetAtt LambdaEncryptionHelper.Arn
      KeyId: !Ref KMSHelperKey
      String: !Ref ExampleParameter
